

/*
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。
 * 请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？
 * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18
 * 
 * 可以用 DP 来做，假设 dp[i] 表示长度为 i 的绳子所能得到的最大乘积，那么对于当前这个长度，我们可以选择不进行切分，或者是在 1~j 中
 * 选择一个长度进行切分，那么此时绳子就被分成了两部分，一部分是 j，另一部分则是 i - j。
 * 
 * 要么我们将其分成 j 和 i - j 这两段，然后计算乘积；要么我们将其分成 j 和 dp[i -j] 所对应的段数，然后计算乘积
 * 
 * 所以，状态转移方程为 dp[i] = max{ 1*dp[i-1], 2*dp[i-2], 3*dp[i-3], ...., (i-1)*dp[1], 1 * (i-1), 2 * (i-1), 3 * (i-1), ...}
 */

#include <vector>

using namespace std;


class Solution {
public:
    int cuttingRope(int n) {
        vector<int> dp(n+1, -1);

        dp[1] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i - 1; j++) {
                dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j]));
            }
        }

        return dp[n];
    }
};
